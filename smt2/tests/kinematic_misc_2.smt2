(set-option :precision 0.0001)
(set-logic QF_NRA)
(declare-fun s0a () Real)
(declare-fun s0i () Real)
(declare-fun s0j () Real)
(declare-fun s0k () Real)
(declare-fun s0x () Real)
(declare-fun s0y () Real)
(declare-fun s0z () Real)
(declare-fun s1a () Real)
(declare-fun s1i () Real)
(declare-fun s1j () Real)
(declare-fun s1k () Real)
(declare-fun s1x () Real)
(declare-fun s1y () Real)
(declare-fun s1z () Real)
(declare-fun s2a () Real)
(declare-fun s2i () Real)
(declare-fun s2j () Real)
(declare-fun s2k () Real)
(declare-fun s2x () Real)
(declare-fun s2y () Real)
(declare-fun s2z () Real)
(declare-fun r0a () Real)
(declare-fun r0i () Real)
(declare-fun r0j () Real)
(declare-fun r0k () Real)
(declare-fun r0x () Real)
(declare-fun r0y () Real)
(declare-fun r0z () Real)
(declare-fun r1a () Real)
(declare-fun r1i () Real)
(declare-fun r1j () Real)
(declare-fun r1k () Real)
(declare-fun r1x () Real)
(declare-fun r1y () Real)
(declare-fun r1z () Real)
(declare-fun r2a () Real)
(declare-fun r2i () Real)
(declare-fun r2j () Real)
(declare-fun r2k () Real)
(declare-fun r2x () Real)
(declare-fun r2y () Real)
(declare-fun r2z () Real)
(declare-fun ea () Real)
(declare-fun ei () Real)
(declare-fun ej () Real)
(declare-fun ek () Real)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun z () Real)
(declare-fun eea () Real)
(declare-fun eei () Real)
(declare-fun eej () Real)
(declare-fun eek () Real)
(declare-fun xx () Real)
(declare-fun yy () Real)
(declare-fun zz () Real)
(declare-fun alpha () Real)
(declare-fun beta () Real)
(declare-fun length1 () Real)
(declare-fun length2 () Real)
(declare-fun length3 () Real)
(assert ( >= s0a -1.0 ) )
(assert ( <= s0a 1.0 ) )
(assert ( >= s0i -1.0 ) )
(assert ( <= s0i 1.0 ) )
(assert ( >= s0j -1.0 ) )
(assert ( <= s0j 1.0 ) )
(assert ( >= s0k -1.0 ) )
(assert ( <= s0k 1.0 ) )
(assert ( >= s0x -1.0 ) )
(assert ( <= s0x 1.0 ) )
(assert ( >= s0y -1.0 ) )
(assert ( <= s0y 1.0 ) )
(assert ( >= s0z -1.0 ) )
(assert ( <= s0z 1.0 ) )
(assert ( >= s1a -1.0 ) )
(assert ( <= s1a 1.0 ) )
(assert ( >= s1i -1.0 ) )
(assert ( <= s1i 1.0 ) )
(assert ( >= s1j -1.0 ) )
(assert ( <= s1j 1.0 ) )
(assert ( >= s1k -1.0 ) )
(assert ( <= s1k 1.0 ) )
(assert ( >= s1x -1.0 ) )
(assert ( <= s1x 1.0 ) )
(assert ( >= s1y -1.0 ) )
(assert ( <= s1y 1.0 ) )
(assert ( >= s1z -1.0 ) )
(assert ( <= s1z 1.0 ) )
(assert ( >= s2a -1.0 ) )
(assert ( <= s2a 1.0 ) )
(assert ( >= s2i -1.0 ) )
(assert ( <= s2i 1.0 ) )
(assert ( >= s2j -1.0 ) )
(assert ( <= s2j 1.0 ) )
(assert ( >= s2k -1.0 ) )
(assert ( <= s2k 1.0 ) )
(assert ( >= s2x -1.0 ) )
(assert ( <= s2x 1.0 ) )
(assert ( >= s2y -1.0 ) )
(assert ( <= s2y 1.0 ) )
(assert ( >= s2z -1.0 ) )
(assert ( <= s2z 1.0 ) )
(assert ( >= ea -1.0 ) )
(assert ( <= ea 1.0 ) )
(assert ( >= ei -1.0 ) )
(assert ( <= ei 1.0 ) )
(assert ( >= ej -1.0 ) )
(assert ( <= ej 1.0 ) )
(assert ( >= ek -1.0 ) )
(assert ( <= ek 1.0 ) )
(assert ( >= x -1.0 ) )
(assert ( <= x 1.0 ) )
(assert ( >= y -1.0 ) )
(assert ( <= y 1.0 ) )
(assert ( >= z -1.0 ) )
(assert ( <= z 1.0 ) )
(assert ( >= alpha -0.8 ) )
(assert ( <= alpha 0.8 ) )
(assert ( >= beta -0.8 ) )
(assert ( <= beta 0.8 ) )
(assert ( >= length1 100 ) )
(assert ( <= length1 100 ) )
(assert ( >= length2 100 ) )
(assert ( <= length2 100 ) )
(assert ( >= length3 100 ) )
(assert ( <= length3 100 ) )

(assert ( = 0.0 s0x ) )
(assert ( = 0.0 s0y ) )
(assert ( = 0.0 s0z ) )
(assert ( = 1.0 s0a ) )
(assert ( = 0.0 s0i ) )
(assert ( = 0.0 s0j ) )
(assert ( = 0.0 s0k ) )
(assert ( = ( + ( ^ s0k 2 ) ( ^ s0j 2 ) ( ^ s0i 2 ) ( ^ s0a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^ s1k 2 ) ( ^ s1j 2 ) ( ^ s1i 2 ) ( ^ s1a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^ s2k 2 ) ( ^ s2j 2 ) ( ^ s2i 2 ) ( ^ s2a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^  ek 2 ) ( ^  ej 2 ) ( ^  ei 2 ) ( ^  ea 2 ) ) 1.0 ) )
(assert ( = ( + ( * 1000.0 s0x ) ( - ( * 1.0 length1 ( ^ s0k 2 ) ) ) ( - ( * 1.0 length1 ( ^ s0j 2 ) ) ) ( * length1 ( ^ s0i 2 ) ) ( * length1 ( ^ s0a 2 ) ) ) ( * 1000.0 s1x ) ) )
(assert ( = ( + ( * 1000.0 s0y ) ( * 2.0 length1 s0a s0k ) ( * 2.0 length1 s0i s0j ) ) ( * 1000.0 s1y ) ) )
(assert ( = ( + ( * 1000.0 s0z ) ( * 2.0 length1 s0i s0k ) ( - ( * 2.0 length1 s0a s0j ) ) ) ( * 1000.0 s1z ) ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) s0a ) ( - ( * 1.0 ( sin ( * 0.5 alpha ) ) s0k ) ) ) s1a ) )
(assert ( = ( + ( * ( sin ( * 0.5 alpha ) ) s0j ) ( * ( cos ( * 0.5 alpha ) ) s0i ) ) s1i ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) s0j ) ( - ( * 1.0 ( sin ( * 0.5 alpha ) ) s0i ) ) ) s1j ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) s0k ) ( * ( sin ( * 0.5 alpha ) ) s0a ) ) s1k ) )
(assert ( = ( + ( * 1000.0 s1x ) ( - ( * 1.0 length2 ( ^ s1k 2 ) ) ) ( - ( * 1.0 length2 ( ^ s1j 2 ) ) ) ( * length2 ( ^ s1i 2 ) ) ( * length2 ( ^ s1a 2 ) ) ) ( * 1000.0 s2x ) ) )
(assert ( = ( + ( * 1000.0 s1y ) ( * 2.0 length2 s1a s1k ) ( * 2.0 length2 s1i s1j ) ) ( * 1000.0 s2y ) ) )
(assert ( = ( + ( * 1000.0 s1z ) ( * 2.0 length2 s1i s1k ) ( - ( * 2.0 length2 s1a s1j ) ) ) ( * 1000.0 s2z ) ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) s1a ) ( - ( * 1.0 ( sin ( * 0.5 beta ) ) s1k ) ) ) s2a ) )
(assert ( = ( + ( * ( sin ( * 0.5 beta ) ) s1j ) ( * ( cos ( * 0.5 beta ) ) s1i ) ) s2i ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) s1j ) ( - ( * 1.0 ( sin ( * 0.5 beta ) ) s1i ) ) ) s2j ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) s1k ) ( * ( sin ( * 0.5 beta ) ) s1a ) ) s2k ) )
(assert ( = ( + ( * 1000.0 s2x ) ( - ( * 1.0 length3 ( ^ s2k 2 ) ) ) ( - ( * 1.0 length3 ( ^ s2j 2 ) ) ) ( * length3 ( ^ s2i 2 ) ) ( * length3 ( ^ s2a 2 ) ) ) ( * 1000.0 x ) ) )
(assert ( = ( + ( * 1000.0 s2y ) ( * 2.0 length3 s2a s2k ) ( * 2.0 length3 s2i s2j ) ) ( * 1000.0 y ) ) )
(assert ( = ( + ( * 1000.0 s2z ) ( * 2.0 length3 s2i s2k ) ( - ( * 2.0 length3 s2a s2j ) ) ) ( * 1000.0 z ) ) )
(assert ( = s2a ea ) )
(assert ( = s2i ei ) )
(assert ( = s2j ej ) )
(assert ( = s2k ek ) )

(assert ( = 0.0 r0x ) )
(assert ( = 0.0 r0y ) )
(assert ( = 0.0 r0z ) )
(assert ( = 1.0 r0a ) )
(assert ( = 0.0 r0i ) )
(assert ( = 0.0 r0j ) )
(assert ( = 0.0 r0k ) )
(assert ( = ( + ( ^ r0k 2 ) ( ^ r0j 2 ) ( ^ r0i 2 ) ( ^ r0a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^ r1k 2 ) ( ^ r1j 2 ) ( ^ r1i 2 ) ( ^ r1a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^ r2k 2 ) ( ^ r2j 2 ) ( ^ r2i 2 ) ( ^ r2a 2 ) ) 1.0 ) )
(assert ( = ( + ( ^ eek 2 ) ( ^ eej 2 ) ( ^ eei 2 ) ( ^ eea 2 ) ) 1.0 ) )
(assert ( = ( + ( * 1000.0 r0x ) ( - ( * 1.0 length1 ( ^ r0k 2 ) ) ) ( - ( * 1.0 length1 ( ^ r0j 2 ) ) ) ( * length1 ( ^ r0i 2 ) ) ( * length1 ( ^ r0a 2 ) ) ) ( * 1000.0 r1x ) ) )
(assert ( = ( + ( * 1000.0 r0y ) ( * 2.0 length1 r0a r0k ) ( * 2.0 length1 r0i r0j ) ) ( * 1000.0 r1y ) ) )
(assert ( = ( + ( * 1000.0 r0z ) ( * 2.0 length1 r0i r0k ) ( - ( * 2.0 length1 r0a r0j ) ) ) ( * 1000.0 r1z ) ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) r0a ) ( - ( * 1.0 ( sin ( * 0.5 alpha ) ) r0k ) ) ) r1a ) )
(assert ( = ( + ( * ( sin ( * 0.5 alpha ) ) r0j ) ( * ( cos ( * 0.5 alpha ) ) r0i ) ) r1i ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) r0j ) ( - ( * 1.0 ( sin ( * 0.5 alpha ) ) r0i ) ) ) r1j ) )
(assert ( = ( + ( * ( cos ( * 0.5 alpha ) ) r0k ) ( * ( sin ( * 0.5 alpha ) ) r0a ) ) r1k ) )
(assert ( = ( + ( * 1000.0 r1x ) ( - ( * 1.0 length2 ( ^ r1k 2 ) ) ) ( - ( * 1.0 length2 ( ^ r1j 2 ) ) ) ( * length2 ( ^ r1i 2 ) ) ( * length2 ( ^ r1a 2 ) ) ) ( * 1000.0 r2x ) ) )
(assert ( = ( + ( * 1000.0 r1y ) ( * 2.0 length2 r1a r1k ) ( * 2.0 length2 r1i r1j ) ) ( * 1000.0 r2y ) ) )
(assert ( = ( + ( * 1000.0 r1z ) ( * 2.0 length2 r1i r1k ) ( - ( * 2.0 length2 r1a r1j ) ) ) ( * 1000.0 r2z ) ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) r1a ) ( - ( * 1.0 ( sin ( * 0.5 beta ) ) r1k ) ) ) r2a ) )
(assert ( = ( + ( * ( sin ( * 0.5 beta ) ) r1j ) ( * ( cos ( * 0.5 beta ) ) r1i ) ) r2i ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) r1j ) ( - ( * 1.0 ( sin ( * 0.5 beta ) ) r1i ) ) ) r2j ) )
(assert ( = ( + ( * ( cos ( * 0.5 beta ) ) r1k ) ( * ( sin ( * 0.5 beta ) ) r1a ) ) r2k ) )
(assert ( = ( + ( * 1000.0 r2x ) ( - ( * 1.0 length3 ( ^ r2k 2 ) ) ) ( - ( * 1.0 length3 ( ^ r2j 2 ) ) ) ( * length3 ( ^ r2i 2 ) ) ( * length3 ( ^ r2a 2 ) ) ) ( * 1000.0 xx ) ) )
(assert ( = ( + ( * 1000.0 r2y ) ( * 2.0 length3 r2a r2k ) ( * 2.0 length3 r2i r2j ) ) ( * 1000.0 yy ) ) )
(assert ( = ( + ( * 1000.0 r2z ) ( * 2.0 length3 r2i r2k ) ( - ( * 2.0 length3 r2a r2j ) ) ) ( * 1000.0 zz ) ) )
(assert ( = r2a eea ) )
(assert ( = r2i eei ) )
(assert ( = r2j eej ) )
(assert ( = r2k eek ) )

(assert (>= (+ (^ (- (* 1000.0 x) (* 1000.0 xx) ) 2) (^ (- (* 1000.0 y) (* 1000.0 yy) ) 2) (^ (- (* 1000.0 z) (* 1000.0 zz)) 2) ) 4) )

(check-sat)
(exit)
