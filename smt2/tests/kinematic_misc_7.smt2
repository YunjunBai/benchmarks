(set-logic QF_NRA)
; variables
(declare-fun ua () Real) (declare-fun ui () Real)
(declare-fun uj () Real) (declare-fun uk () Real)
(declare-fun x () Real) (declare-fun y () Real) (declare-fun z () Real)
(declare-fun ba () Real) (declare-fun bk () Real)
(declare-fun alpha () Real) (declare-fun gamma () Real)
; bounds
(assert ( >= ua -1 ) ) (assert ( <= ua 1 ) )
(assert ( >= ui -1 ) ) (assert ( <= ui 1 ) )
(assert ( >= uj -1 ) ) (assert ( <= uj 1 ) )
(assert ( >= uk -1 ) ) (assert ( <= uk 1 ) )
(assert ( >= x -200 ) ) (assert ( <= x 200 ) )
(assert ( >= y -200 ) ) (assert ( <= y 200 ) )
(assert ( >= z -200 ) ) (assert ( <= z 200 ) )
(assert ( >= ba -1 ) ) (assert ( <= ba 1 ) )
(assert ( >= bk -1 ) ) (assert ( <= bk 1 ) )
(assert ( >= alpha -3.15 ) ) (assert ( <= alpha 3.15 ) )
(assert ( >= gamma -3.15 ) ) (assert ( <= gamma 3.15 ) )
; constraints
(assert ( = ( + ( ^ uk 2 ) ( ^ uj 2 ) ( ^ ui 2 ) ( ^ ua 2 ) ) 1 ) )
(assert ( = ( + ( ^ bk 2 ) ( ^ ba 2 ) ) 1 ) )
(assert ( = ( cos ( / gamma 2 ) ) ba ) )
(assert ( = ( sin ( / gamma 2 ) ) bk ) )
(assert ( = ( + ( * ( cos ( / alpha 2 ) ) ba ) ) ua ) )
(assert ( = ( + ( - ( * ( sin ( / alpha 2 ) ) bk ) ) ) ui ) )
(assert ( = ( + ( * ( sin ( / alpha 2 ) ) ba ) ) uj ) )
(assert ( = ( + ( * ( cos ( / alpha 2 ) ) bk ) ) uk ) )
(assert ( = ( + ( - ( * 148 ( ^ uk 2 ) ) ) ( - ( * 148 ( ^ uj 2 ) ) ) ( * 148 ( ^ ui 2 ) ) ( * 148 ( ^ ua 2 ) ) ) x ) )
(assert ( = ( + ( * 296 ua uk ) ( * 296 ui uj ) ) y ) )
(assert ( = ( + ( * 296 ui uk ) ( - ( * 296 ua uj ) ) ) z ) )
(check-sat)
(exit)
