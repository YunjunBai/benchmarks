(set-option :precision 0.01)
(set-logic QF_NRA)
(declare-fun s0a () Real)
(declare-fun s0i () Real)
(declare-fun s0j () Real)
(declare-fun s0k () Real)
(declare-fun s0x () Real)
(declare-fun s0y () Real)
(declare-fun s0z () Real)
(declare-fun s1a () Real)
(declare-fun s1i () Real)
(declare-fun s1j () Real)
(declare-fun s1k () Real)
(declare-fun s1x () Real)
(declare-fun s1y () Real)
(declare-fun s1z () Real)
(declare-fun s2a () Real)
(declare-fun s2i () Real)
(declare-fun s2j () Real)
(declare-fun s2k () Real)
(declare-fun s2x () Real)
(declare-fun s2y () Real)
(declare-fun s2z () Real)
(declare-fun ea () Real)
(declare-fun ei () Real)
(declare-fun ej () Real)
(declare-fun ek () Real)
(declare-fun x () Real)
(declare-fun y () Real)
(declare-fun z () Real)
(declare-fun alpha () Real)
(declare-fun beta () Real)
(declare-fun gamma () Real)
(assert ( = ( + ( ^ s0k 2 ) ( ^ s0j 2 ) ( ^ s0i 2 ) ( ^ s0a 2 ) ) 1 ) )
(assert ( >= s0a -1 ) )
(assert ( <= s0a 1 ) )
(assert ( >= s0i -1 ) )
(assert ( <= s0i 1 ) )
(assert ( >= s0j -1 ) )
(assert ( <= s0j 1 ) )
(assert ( >= s0k -1 ) )
(assert ( <= s0k 1 ) )
(assert ( >= s0x -1000 ) )
(assert ( <= s0x 1000 ) )
(assert ( >= s0y -1000 ) )
(assert ( <= s0y 1000 ) )
(assert ( >= s0z -1000 ) )
(assert ( <= s0z 1000 ) )
(assert ( = ( + ( ^ s1k 2 ) ( ^ s1j 2 ) ( ^ s1i 2 ) ( ^ s1a 2 ) ) 1 ) )
(assert ( >= s1a -1 ) )
(assert ( <= s1a 1 ) )
(assert ( >= s1i -1 ) )
(assert ( <= s1i 1 ) )
(assert ( >= s1j -1 ) )
(assert ( <= s1j 1 ) )
(assert ( >= s1k -1 ) )
(assert ( <= s1k 1 ) )
(assert ( >= s1x -1000 ) )
(assert ( <= s1x 1000 ) )
(assert ( >= s1y -1000 ) )
(assert ( <= s1y 1000 ) )
(assert ( >= s1z -1000 ) )
(assert ( <= s1z 1000 ) )
(assert ( = ( + ( ^ s2k 2 ) ( ^ s2j 2 ) ( ^ s2i 2 ) ( ^ s2a 2 ) ) 1 ) )
(assert ( >= s2a -1 ) )
(assert ( <= s2a 1 ) )
(assert ( >= s2i -1 ) )
(assert ( <= s2i 1 ) )
(assert ( >= s2j -1 ) )
(assert ( <= s2j 1 ) )
(assert ( >= s2k -1 ) )
(assert ( <= s2k 1 ) )
(assert ( >= s2x -1000 ) )
(assert ( <= s2x 1000 ) )
(assert ( >= s2y -1000 ) )
(assert ( <= s2y 1000 ) )
(assert ( >= s2z -1000 ) )
(assert ( <= s2z 1000 ) )
(assert ( = ( + ( ^ ek 2 ) ( ^ ej 2 ) ( ^ ei 2 ) ( ^ ea 2 ) ) 1 ) )
(assert ( >= ea -1 ) )
(assert ( <= ea 1 ) )
(assert ( >= ei -1 ) )
(assert ( <= ei 1 ) )
(assert ( >= ej -1 ) )
(assert ( <= ej 1 ) )
(assert ( >= ek -1 ) )
(assert ( <= ek 1 ) )
(assert ( >= x -1000 ) )
(assert ( <= x 1000 ) )
(assert ( >= y -1000 ) )
(assert ( <= y 1000 ) )
(assert ( >= z -1000 ) )
(assert ( <= z 1000 ) )
(assert ( >= alpha -3.15 ) )
(assert ( <= alpha 3.15 ) )
(assert ( >= beta -3.15 ) )
(assert ( <= beta 3.15 ) )
(assert ( >= gamma -3.15 ) )
(assert ( <= gamma 3.15 ) )
(assert ( = 0 s0x ) )
(assert ( = 0 s0y ) )
(assert ( = 0 s0z ) )
(assert ( = ( cos ( / alpha 2 ) ) s0a ) )
(assert ( = 0 s0i ) )
(assert ( = 0 s0j ) )
(assert ( = ( sin ( / alpha 2 ) ) s0k ) )
(assert ( = ( + s0x ( - ( * 100 ( ^ s0k 2 ) ) ) ( - ( * 100 ( ^ s0j 2 ) ) ) ( * 100 ( ^ s0i 2 ) ) ( * 100 ( ^ s0a 2 ) ) ) s1x ) )
(assert ( = ( + s0y ( * 200 s0a s0k ) ( * 200 s0i s0j ) ) s1y ) )
(assert ( = ( + s0z ( * 200 s0i s0k ) ( - ( * 200 s0a s0j ) ) ) s1z ) )
(assert ( = ( + ( * ( cos ( / beta 2 ) ) s0a ) ( - ( * ( sin ( / beta 2 ) ) s0k ) ) ) s1a ) )
(assert ( = ( + ( * ( sin ( / beta 2 ) ) s0j ) ( * ( cos ( / beta 2 ) ) s0i ) ) s1i ) )
(assert ( = ( + ( * ( cos ( / beta 2 ) ) s0j ) ( - ( * ( sin ( / beta 2 ) ) s0i ) ) ) s1j ) )
(assert ( = ( + ( * ( cos ( / beta 2 ) ) s0k ) ( * ( sin ( / beta 2 ) ) s0a ) ) s1k ) )
(assert ( = ( + s1x ( - ( * 100 ( ^ s1k 2 ) ) ) ( - ( * 100 ( ^ s1j 2 ) ) ) ( * 100 ( ^ s1i 2 ) ) ( * 100 ( ^ s1a 2 ) ) ) s2x ) )
(assert ( = ( + s1y ( * 200 s1a s1k ) ( * 200 s1i s1j ) ) s2y ) )
(assert ( = ( + s1z ( * 200 s1i s1k ) ( - ( * 200 s1a s1j ) ) ) s2z ) )
(assert ( = ( + ( * s1a ( cos ( / gamma 2 ) ) ) ( - ( * s1k ( sin ( / gamma 2 ) ) ) ) ) s2a ) )
(assert ( = ( + ( * s1j ( sin ( / gamma 2 ) ) ) ( * s1i ( cos ( / gamma 2 ) ) ) ) s2i ) )
(assert ( = ( + ( * s1j ( cos ( / gamma 2 ) ) ) ( - ( * s1i ( sin ( / gamma 2 ) ) ) ) ) s2j ) )
(assert ( = ( + ( * s1a ( sin ( / gamma 2 ) ) ) ( * s1k ( cos ( / gamma 2 ) ) ) ) s2k ) )
(assert ( = ( + s2x ( - ( * 100 ( ^ s2k 2 ) ) ) ( - ( * 100 ( ^ s2j 2 ) ) ) ( * 100 ( ^ s2i 2 ) ) ( * 100 ( ^ s2a 2 ) ) ) x ) )
(assert ( = ( + s2y ( * 200 s2a s2k ) ( * 200 s2i s2j ) ) y ) )
(assert ( = ( + s2z ( * 200 s2i s2k ) ( - ( * 200 s2a s2j ) ) ) z ) )
(assert ( = s2a ea ) )
(assert ( = s2i ei ) )
(assert ( = s2j ej ) )
(assert ( = s2k ek ) )
(check-sat)
(exit)