#define v 1
#define vo 3
#define dt 0.01
#define eps 0.1
#define D 0.3
#define B1 x^2+y^2

[-10, 10] x;
[-10, 10] y;
[-50, 50] theta;

[-10, 10] xo;
[-10, 10] yo;
[-50, 50] thetao;

[-20,40] dist;

[0, 10] time;
[0, 10] tau;

{ mode 1;
  invt:
	dist > 0.0;
	B1 <4.5;
  flow:
        d/dt[x] = v*sin(theta);
        d/dt[y] = v*cos(theta);
	d/dt[xo] = vo*sin(thetao);
	d/dt[yo] = vo*cos(thetao);
	d/dt[theta] = 1; 
        d/dt[thetao] = -1;
	d/dt[dist] = 2*(x-xo)*v*sin(theta) + 2*(y-yo)*v*cos(theta) + 2*(xo-x)*vo*sin(thetao) + 2*(yo-y)*vo*cos(thetao);
        d/dt[tau] = 1;
  jump:
	(dist < D) ==> @2 true;
}

{ mode 2;
  invt:
  flow:
        d/dt[x] = v*sin(theta);
        d/dt[y] = v*cos(theta);
        d/dt[theta] = 1;
        d/dt[tau] = 1;
  jump:
}

init:
@1	(and (x<0.5) (x>0.1) (y>0.1) (y<2.2) (tau = 0) (theta = 0)  
		(xo=1) (yo = 1) (thetao = 0) (dist = sqrt((x-xo)^2 + (y-yo)^2)));

goal:

@1  (tau = 4);

//@2  (and (tau >= 0.01*dt) //ratio of x and y can be a problem for tiny tau
//         (not (and  ( x > -y/sqrt(2)-eps ) ( x < y/sqrt(2)+eps ) 
//                    ( sqrt(x^2 + y^2) < 1+sqrt(3) + eps))
//    ));
